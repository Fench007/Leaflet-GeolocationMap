{"ast":null,"code":"var _jsxFileName = \"/Users/florentluu/Documents/leaflet-reactjs/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport L from 'leaflet';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport leafOrange from './assets/leaf-orange.png';\nimport leafShadow from './assets/leaf-shadow.png';\nimport { geolocated } from \"react-geolocated\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.orangeIcon = L.icon({\n      iconUrl: leafOrange,\n      shadowUrl: leafShadow,\n      iconSize: [38, 95],\n      // size of the icon\n      shadowSize: [50, 64],\n      // size of the shadow\n      iconAnchor: [22, 94],\n      // point of the icon which will correspond to marker's location\n      shadowAnchor: [4, 62],\n      // the same for the shadow\n      popupAnchor: [-3, -86]\n    });\n    this.state = {\n      orangeIcon: {\n        lat: '',\n        lng: ''\n      },\n      zoom: 13\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidUpdate() {\n    console.log('COORD', this.state.orangeIcon);\n\n    if (this.state.orangeIcon.lat === '') {\n      this.setState({\n        orangeIcon: {\n          lat: this.props.coords.latitude,\n          lng: this.props.coords.longitude\n        }\n      });\n    }\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    alert('Message envoy√©: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    const positionOrangeIcon = [this.state.orangeIcon.lat, this.state.orangeIcon.lng];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, !this.props.isGeolocationAvailable ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Your browser does not support Geolocation\") : !this.props.isGeolocationEnabled ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Geolocation is not enabled\") : this.props.coords ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \" Name :\", React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \" Check-in / Check-out :\", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"Check\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \" Latitude:\", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"lat\",\n      value: this.props.coords.latitude,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \" Longitude:\", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"lat\",\n      value: this.props.coords.longitude,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Send\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Getting the location data\\u2026 \"), React.createElement(Map, {\n      className: \"map\",\n      center: positionGreenIcon,\n      zoom: this.state.zoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(TileLayer, {\n      attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      position: positionOrangeIcon,\n      icon: this.orangeIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Popup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"I am an orange leaf\"))));\n  }\n\n}\n\nexport default geolocated({\n  positionOptions: {\n    enableHighAccuracy: false\n  },\n  userDecisionTimeout: 5000\n})(App);","map":{"version":3,"sources":["/Users/florentluu/Documents/leaflet-reactjs/src/App.js"],"names":["React","L","Map","TileLayer","Marker","Popup","leafOrange","leafShadow","geolocated","App","Component","constructor","props","orangeIcon","icon","iconUrl","shadowUrl","iconSize","shadowSize","iconAnchor","shadowAnchor","popupAnchor","state","lat","lng","zoom","handleChange","bind","handleSubmit","componentDidUpdate","console","log","setState","coords","latitude","longitude","event","value","target","alert","preventDefault","render","positionOrangeIcon","isGeolocationAvailable","isGeolocationEnabled","positionGreenIcon","positionOptions","enableHighAccuracy","userDecisionTimeout"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,MAAzB,EAAiCC,KAAjC,QAA8C,eAA9C;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AACA,MAAMC,GAAN,SAAkBT,KAAK,CAACU,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAClB,UAAMA,KAAN;AADkB,SA4BlBC,UA5BkB,GA4BLZ,CAAC,CAACa,IAAF,CAAO;AAClBC,MAAAA,OAAO,EAAET,UADS;AAElBU,MAAAA,SAAS,EAAET,UAFO;AAGlBU,MAAAA,QAAQ,EAAM,CAAC,EAAD,EAAK,EAAL,CAHI;AAGM;AACxBC,MAAAA,UAAU,EAAI,CAAC,EAAD,EAAK,EAAL,CAJI;AAIM;AACxBC,MAAAA,UAAU,EAAI,CAAC,EAAD,EAAK,EAAL,CALI;AAKM;AACxBC,MAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,EAAJ,CANI;AAMM;AACxBC,MAAAA,WAAW,EAAG,CAAC,CAAC,CAAF,EAAK,CAAC,EAAN;AAPI,KAAP,CA5BK;AAElB,SAAKC,KAAL,GAAa;AACXT,MAAAA,UAAU,EAAE;AACVU,QAAAA,GAAG,EAAE,EADK;AAEVC,QAAAA,GAAG,EAAE;AAFK,OADD;AAKXC,MAAAA,IAAI,EAAE;AALK,KAAb;AAOA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAmB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAAnB;AACC;;AAEDE,EAAAA,kBAAkB,GAAE;AAAEC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKT,KAAL,CAAWT,UAAhC;;AACpB,QAAG,KAAKS,KAAL,CAAWT,UAAX,CAAsBU,GAAtB,KAA8B,EAAjC,EAAqC;AACrC,WAAKS,QAAL,CAAc;AAACnB,QAAAA,UAAU,EAAE;AAACU,UAAAA,GAAG,EAAC,KAAKX,KAAL,CAAWqB,MAAX,CAAkBC,QAAvB;AAAiCV,UAAAA,GAAG,EAAC,KAAKZ,KAAL,CAAWqB,MAAX,CAAkBE;AAAvD;AAAb,OAAd;AACC;AACF;;AAEDT,EAAAA,YAAY,CAACU,KAAD,EAAQ;AAClB,SAAKJ,QAAL,CAAc;AAACK,MAAAA,KAAK,EAAED,KAAK,CAACE,MAAN,CAAaD;AAArB,KAAd;AACD;;AAEDT,EAAAA,YAAY,CAACQ,KAAD,EAAQ;AAClBG,IAAAA,KAAK,CAAC,qBAAoB,KAAKjB,KAAL,CAAWe,KAAhC,CAAL;AACAD,IAAAA,KAAK,CAACI,cAAN;AACD;;AAaDC,EAAAA,MAAM,GAAE;AACN,UAAMC,kBAAkB,GAAG,CAAC,KAAKpB,KAAL,CAAWT,UAAX,CAAsBU,GAAvB,EAA4B,KAAKD,KAAL,CAAWT,UAAX,CAAsBW,GAAlD,CAA3B;AAEA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE,CAAC,KAAKZ,KAAL,CAAW+B,sBAAZ,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADJ,GAEI,CAAC,KAAK/B,KAAL,CAAWgC,oBAAZ,GACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADA,GAEA,KAAKhC,KAAL,CAAWqB,MAAX,GAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,QAAQ,EAAE,KAAKL,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWe,KAArC;AAA4C,MAAA,QAAQ,EAAE,KAAKX,YAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,QAAQ,EAAE,KAAKA,YAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,KAAxB;AAA8B,MAAA,KAAK,EAAE,KAAKd,KAAL,CAAWqB,MAAX,CAAkBC,QAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAPF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,KAAxB;AAA8B,MAAA,KAAK,EAAE,KAAKtB,KAAL,CAAWqB,MAAX,CAAkBE,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,EAaI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbJ,CADF,CAFI,GAoFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CA3FN,EA4FA,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,MAAM,EAAEU,iBAA7B;AAAgD,MAAA,IAAI,EAAE,KAAKvB,KAAL,CAAWG,IAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,WAAW,EAAC,2EADd;AAEE,MAAA,GAAG,EAAC,oDAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE,oBAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEiB,kBAAlB;AAAsC,MAAA,IAAI,EAAE,KAAK7B,UAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CALF,CA5FA,CADF;AAgID;;AA3K+B;;AA8KlC,eAAeL,UAAU,CAAC;AACxBsC,EAAAA,eAAe,EAAE;AACbC,IAAAA,kBAAkB,EAAE;AADP,GADO;AAIxBC,EAAAA,mBAAmB,EAAE;AAJG,CAAD,CAAV,CAKZvC,GALY,CAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport L from 'leaflet';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport leafOrange from './assets/leaf-orange.png';\nimport leafShadow from './assets/leaf-shadow.png';\nimport { geolocated } from \"react-geolocated\";\nclass App extends React.Component {\n  constructor(props){\n  super(props)\n  this.state = {\n    orangeIcon: {\n      lat: '',\n      lng: '',\n    },\n    zoom: 13\n  }\n  this.handleChange = this.handleChange.bind(this);\n  this.handleSubmit= this.handleSubmit.bind(this)\n  }\n\n  componentDidUpdate(){ console.log('COORD', this.state.orangeIcon)\n    if(this.state.orangeIcon.lat === '') {\n    this.setState({orangeIcon: {lat:this.props.coords.latitude, lng:this.props.coords.longitude}})\n    }\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    alert('Message envoy√©: '+ this.state.value);\n    event.preventDefault();\n  }\n\n  orangeIcon = L.icon({\n    iconUrl: leafOrange,\n    shadowUrl: leafShadow,\n    iconSize:     [38, 95], // size of the icon\n    shadowSize:   [50, 64], // size of the shadow\n    iconAnchor:   [22, 94], // point of the icon which will correspond to marker's location\n    shadowAnchor: [4, 62],  // the same for the shadow\n    popupAnchor:  [-3, -86]\n  });\n\n  \n  render(){\n    const positionOrangeIcon = [this.state.orangeIcon.lat, this.state.orangeIcon.lng];\n    \n    return (\n      <div>\n        \n        {\n        !this.props.isGeolocationAvailable ? (\n            <div>Your browser does not support Geolocation</div>\n        ) : !this.props.isGeolocationEnabled ? (\n            <div>Geolocation is not enabled</div>\n        ) : this.props.coords ? ( \n\n        <div>  \n          <form onSubmit={this.handleSubmit}>\n            <label> Name :\n              <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n            </label>\n            <label> Check-in / Check-out :\n              <input type=\"text\" name=\"Check\" onChange={this.handleChange}/>\n            </label>\n            <label> Latitude: \n              <input type=\"text\" name=\"lat\" value={this.props.coords.latitude}/>\n            </label>\n            <label> Longitude: \n              <input type=\"text\" name=\"lat\" value={this.props.coords.longitude}/>\n            </label>\n              <input type=\"submit\" value=\"Send\" />\n          </form>\n\n          {/* //NEW FORM// */}\n\n        {/* <form className=\"container-form\" onSubmit={this.handleSubmit.bind(this)}>\n        <div className=\"contactform\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            className=\"text-primary\"\n            onChange={this.handleChange.bind(this, 'name')}\n            placeholder=\"Nom\"\n          />\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={this.state.firstname}\n            className=\"text-primary\"\n            onChange={this.handleChange.bind(this, 'firstname')}\n            placeholder=\"Pr√©nom\"\n          />\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={this.state.email}\n            className=\"text-primary\"\n            onChange={this.handleChange.bind(this, 'email')}\n            placeholder=\"Enter email\"\n          />\n          <input\n            type=\"name\"\n            placeholder=\"Commande n¬∞\"\n            name=\"order\"\n            className=\"text-primary\"\n            value={this.state.order}\n            onChange={this.handleChange.bind(this, 'order')}\n          />\n          <ContactSelect\n            type=\"name\"\n            name=\"order\"\n            className=\"text-primary\"\n            value={this.state.order}\n            onChange={this.handleChange.bind(this, 'order')}\n          />\n          <textarea\n            className=\"textarea text-primary\"\n            type=\"text\"\n            name=\"message\"\n            value={this.state.message}\n            onChange={this.handleChange.bind(this, 'message')}\n            placeholder=\"Votre message\"\n          />\n          <div className=\"buttons-container\">\n            <button\n              className=\"button-send\"\n              type=\"submit\"\n              onClick={() => this.handleSubmit.bind(this)}\n            >\n              Valider\n            </button>\n          </div>\n        </div>\n      </form> */}\n        </div>\n        \n        ) : (\n            <div>Getting the location data&hellip; </div>)}\n      <Map className=\"map\" center={positionGreenIcon} zoom={this.state.zoom}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={positionOrangeIcon} icon={this.orangeIcon}>\n          <Popup>\n          I am an orange leaf\n          </Popup>\n        </Marker>\n      </Map>\n\n      {/* {\n        !this.props.isGeolocationAvailable ? (\n            <div>Your browser does not support Geolocation</div>\n        ) : !this.props.isGeolocationEnabled ? (\n            <div>Geolocation is not enabled</div>\n        ) : this.props.coords ? (\n            <table>\n                <tbody>\n                    <tr>\n                        <td>latitude</td>\n                        <td>{this.props.coords.latitude}</td>\n                    </tr>\n                    <tr>\n                        <td>longitude</td>\n                        <td>{this.props.coords.longitude}</td>\n                    </tr>\n                </tbody>\n            </table>\n        ) : (\n            <div>Getting the location data&hellip; </div>)} */}\n\n         </div>\n    );\n  }\n}\n\nexport default geolocated({\n  positionOptions: {\n      enableHighAccuracy: false,\n  },\n  userDecisionTimeout: 5000,\n})(App);\n"]},"metadata":{},"sourceType":"module"}