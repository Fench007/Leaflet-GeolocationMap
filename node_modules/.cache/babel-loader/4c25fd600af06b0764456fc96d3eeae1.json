{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/*!\nCopyright (c) 2016 Dominik Moritz\n\nThis file is part of the leaflet locate control. It is licensed under the MIT license.\nYou can find the project at: https://github.com/domoritz/leaflet-locatecontrol\n*/\n\n\n(function (factory, window) {\n  // see\n  // https://github.com/Leaflet/Leaflet/blob/master/PLUGIN-GUIDE.md#module-loaders\n  // for details on how to structure a leaflet plugin. define an AMD module that\n  // relies on 'leaflet'\n  if (typeof define === 'function' && define.amd) {\n    define(['leaflet'], factory); // define a Common JS module that relies on 'leaflet'\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    if (typeof window !== 'undefined' && window.L) {\n      module.exports = factory(L);\n    } else {\n      module.exports = factory(require('leaflet'));\n    }\n  } // attach your plugin to the global 'L' variable\n\n\n  if (typeof window !== 'undefined' && window.L) {\n    window.L.Control.Locate = factory(L);\n  }\n})(function (L) {\n  var LDomUtilApplyClassesMethod = function LDomUtilApplyClassesMethod(method, element, classNames) {\n    classNames = classNames.split(' ');\n    classNames.forEach(function (className) {\n      L.DomUtil[method].call(this, element, className);\n    });\n  };\n\n  var addClasses = function addClasses(el, names) {\n    LDomUtilApplyClassesMethod('addClass', el, names);\n  };\n\n  var removeClasses = function removeClasses(el, names) {\n    LDomUtilApplyClassesMethod('removeClass', el, names);\n  };\n\n  var LocateControl = L.Control.extend({\n    options: {\n      /** Position of the control */\n      position: 'topleft',\n\n      /** The layer that the user's location should be drawn on. By default creates a new layer. */\n      layer: undefined,\n\n      /**\n        * Automatically sets the map view (zoom and pan) to the user's location as it updates.\n        * While the map is following the user's location, the control is in the `following` state,\n        * which changes the style of the control and the circle marker.\n        *\n        * Possible values:\n        *  - false: never updates the map view when location changes.\n        *  - 'once': set the view when the location is first determined\n        *  - 'always': always updates the map view when location changes.\n        *              The map view follows the users location.\n        *  - 'untilPan': (default) like 'always', except stops updating the\n        *                view if the user has manually panned the map.\n        *                The map view follows the users location until she pans.\n        */\n      setView: 'untilPan',\n\n      /** Keep the current map zoom level when setting the view and only pan. */\n      keepCurrentZoomLevel: false,\n\n      /** Smooth pan and zoom to the location of the marker. Only works in Leaflet 1.0+. */\n      flyTo: false,\n\n      /**\n        * The user location can be inside and outside the current view when the user clicks on the\n        * control that is already active. Both cases can be configures separately.\n        * Possible values are:\n        *  - 'setView': zoom and pan to the current location\n        *  - 'stop': stop locating and remove the location marker\n        */\n      clickBehavior: {\n        /** What should happen if the user clicks on the control while the location is within the current view. */\n        inView: 'stop',\n\n        /** What should happen if the user clicks on the control while the location is outside the current view. */\n        outOfView: 'setView'\n      },\n\n      /**\n        * If set, save the map bounds just before centering to the user's\n        * location. When control is disabled, set the view back to the\n        * bounds that were saved.\n        */\n      returnToPrevBounds: false,\n\n      /**\n        * Keep a cache of the location after the user deactivates the control. If set to false, the user has to wait\n        * until the locate API returns a new location before they see where they are again.\n        */\n      cacheLocation: true,\n\n      /** If set, a circle that shows the location accuracy is drawn. */\n      drawCircle: true,\n\n      /** If set, the marker at the users' location is drawn. */\n      drawMarker: true,\n\n      /** The class to be used to create the marker. For example L.CircleMarker or L.Marker */\n      markerClass: L.CircleMarker,\n\n      /** Accuracy circle style properties. */\n      circleStyle: {\n        color: '#136AEC',\n        fillColor: '#136AEC',\n        fillOpacity: 0.15,\n        weight: 2,\n        opacity: 0.5\n      },\n\n      /** Inner marker style properties. Only works if your marker class supports `setStyle`. */\n      markerStyle: {\n        color: '#136AEC',\n        fillColor: '#2A93EE',\n        fillOpacity: 0.7,\n        weight: 2,\n        opacity: 0.9,\n        radius: 5\n      },\n\n      /**\n        * Changes to accuracy circle and inner marker while following.\n        * It is only necessary to provide the properties that should change.\n        */\n      followCircleStyle: {},\n      followMarkerStyle: {// color: '#FFA500', fillColor: '#FFB000'\n      },\n\n      /** The CSS class for the icon. For example fa-location-arrow or fa-map-marker */\n      icon: 'fa fa-map-marker',\n      iconLoading: 'fa fa-spinner fa-spin',\n\n      /** The element to be created for icons. For example span or i */\n      iconElementTag: 'span',\n\n      /** Padding around the accuracy circle. */\n      circlePadding: [0, 0],\n\n      /** Use metric units. */\n      metric: true,\n\n      /**\n        * This callback can be used in case you would like to override button creation behavior.\n        * This is useful for DOM manipulation frameworks such as angular etc.\n        * This function should return an object with HtmlElement for the button (link property) and the icon (icon property).\n        */\n      createButtonCallback: function createButtonCallback(container, options) {\n        var link = L.DomUtil.create('a', 'leaflet-bar-part leaflet-bar-part-single', container);\n        link.title = options.strings.title;\n        var icon = L.DomUtil.create(options.iconElementTag, options.icon, link);\n        return {\n          link: link,\n          icon: icon\n        };\n      },\n\n      /** Callback to add logic before the location engine starts working\n       */\n      onActivate: function onActivate() {},\n\n      /** This event is called in case of any location error that is not a time out error. */\n      onLocationError: function onLocationError(err, control) {\n        alert(err.message);\n      },\n\n      /**\n        * This even is called when the user's location is outside the bounds set on the map.\n        * The event is called repeatedly when the location changes.\n        */\n      onLocationOutsideMapBounds: function onLocationOutsideMapBounds(control) {\n        control.stop();\n        alert(control.options.strings.outsideMapBoundsMsg);\n      },\n\n      /** Display a pop-up when the user click on the inner marker. */\n      showPopup: true,\n      strings: {\n        title: 'Show me where I am',\n        metersUnit: 'meters',\n        feetUnit: 'feet',\n        popup: 'You are within {distance} {unit} from this point',\n        outsideMapBoundsMsg: 'You seem located outside the boundaries of the map'\n      },\n\n      /** The default options passed to leaflets locate method. */\n      locateOptions: {\n        maxZoom: Infinity,\n        watch: true,\n        // if you overwrite this, visualization cannot be updated\n        setView: false // have to set this to false because we have to\n        // do setView manually\n\n      }\n    },\n    initialize: function initialize(options) {\n      // set default options if nothing is set (merge one step deep)\n      for (var i in options) {\n        if (_typeof(this.options[i]) === 'object') {\n          L.extend(this.options[i], options[i]);\n        } else {\n          this.options[i] = options[i];\n        }\n      } // extend the follow marker style and circle from the normal style\n\n\n      this.options.followMarkerStyle = L.extend({}, this.options.markerStyle, this.options.followMarkerStyle);\n      this.options.followCircleStyle = L.extend({}, this.options.circleStyle, this.options.followCircleStyle);\n    },\n\n    /**\n    * Add control to map. Returns the container for the control.\n    */\n    onAdd: function onAdd(map) {\n      var container = L.DomUtil.create('div', 'leaflet-control-locate leaflet-bar leaflet-control');\n      this._layer = this.options.layer || new L.LayerGroup();\n\n      this._layer.addTo(map);\n\n      this._event = undefined;\n      this._prevBounds = null;\n      var linkAndIcon = this.options.createButtonCallback(container, this.options);\n      this._link = linkAndIcon.link;\n      this._icon = linkAndIcon.icon;\n      L.DomEvent.on(this._link, 'click', L.DomEvent.stopPropagation).on(this._link, 'click', L.DomEvent.preventDefault).on(this._link, 'click', this._onClick, this).on(this._link, 'dblclick', L.DomEvent.stopPropagation);\n\n      this._resetVariables();\n\n      this._map.on('unload', this._unload, this);\n\n      return container;\n    },\n\n    /**\n    * This method is called when the user clicks on the control.\n    */\n    _onClick: function _onClick() {\n      this._justClicked = true;\n      this._userPanned = false;\n\n      if (this._active && !this._event) {\n        // click while requesting\n        this.stop();\n      } else if (this._active && this._event !== undefined) {\n        var behavior = this._map.getBounds().contains(this._event.latlng) ? this.options.clickBehavior.inView : this.options.clickBehavior.outOfView;\n\n        switch (behavior) {\n          case 'setView':\n            this.setView();\n            break;\n\n          case 'stop':\n            this.stop();\n\n            if (this.options.returnToPrevBounds) {\n              var f = this.options.flyTo ? this._map.flyToBounds : this._map.fitBounds;\n              f.bind(this._map)(this._prevBounds);\n            }\n\n            break;\n        }\n      } else {\n        if (this.options.returnToPrevBounds) {\n          this._prevBounds = this._map.getBounds();\n        }\n\n        this.start();\n      }\n\n      this._updateContainerStyle();\n    },\n\n    /**\n    * Starts the plugin:\n    * - activates the engine\n    * - draws the marker (if coordinates available)\n    */\n    start: function start() {\n      this._activate();\n\n      if (this._event) {\n        this._drawMarker(this._map); // if we already have a location but the user clicked on the control\n\n\n        if (this.options.setView) {\n          this.setView();\n        }\n      }\n\n      this._updateContainerStyle();\n    },\n\n    /**\n    * Stops the plugin:\n    * - deactivates the engine\n    * - reinitializes the button\n    * - removes the marker\n    */\n    stop: function stop() {\n      this._deactivate();\n\n      this._cleanClasses();\n\n      this._resetVariables();\n\n      this._removeMarker();\n    },\n\n    /**\n    * This method launches the location engine.\n    * It is called before the marker is updated,\n    * event if it does not mean that the event will be ready.\n    *\n    * Override it if you want to add more functionalities.\n    * It should set the this._active to true and do nothing if\n    * this._active is true.\n    */\n    _activate: function _activate() {\n      if (!this._active) {\n        this.options.onActivate();\n\n        this._map.locate(this.options.locateOptions);\n\n        this._active = true; // bind event listeners\n\n        this._map.on('locationfound', this._onLocationFound, this);\n\n        this._map.on('locationerror', this._onLocationError, this);\n\n        this._map.on('dragstart', this._onDrag, this);\n      }\n    },\n\n    /**\n    * Called to stop the location engine.\n    *\n    * Override it to shutdown any functionalities you added on start.\n    */\n    _deactivate: function _deactivate() {\n      this._map.stopLocate();\n\n      this._active = false;\n\n      if (!this.options.cacheLocation) {\n        this._event = undefined;\n      } // unbind event listeners\n\n\n      this._map.off('locationfound', this._onLocationFound, this);\n\n      this._map.off('locationerror', this._onLocationError, this);\n\n      this._map.off('dragstart', this._onDrag, this);\n    },\n\n    /**\n    * Zoom (unless we should keep the zoom level) and an to the current view.\n    */\n    setView: function setView() {\n      this._drawMarker();\n\n      if (this._isOutsideMapBounds()) {\n        this._event = undefined; // clear the current location so we can get back into the bounds\n\n        this.options.onLocationOutsideMapBounds(this);\n      } else {\n        if (this.options.keepCurrentZoomLevel) {\n          var f = this.options.flyTo ? this._map.flyTo : this._map.panTo;\n          f.bind(this._map)([this._event.latitude, this._event.longitude]);\n        } else {\n          var f = this.options.flyTo ? this._map.flyToBounds : this._map.fitBounds;\n          f.bind(this._map)(this._event.bounds, {\n            padding: this.options.circlePadding,\n            maxZoom: this.options.locateOptions.maxZoom\n          });\n        }\n      }\n    },\n\n    /**\n    * Draw the marker and accuracy circle on the map.\n    *\n    * Uses the event retrieved from onLocationFound from the map.\n    */\n    _drawMarker: function _drawMarker() {\n      if (this._event.accuracy === undefined) {\n        this._event.accuracy = 0;\n      }\n\n      var radius = this._event.accuracy;\n      var latlng = this._event.latlng; // circle with the radius of the location's accuracy\n\n      if (this.options.drawCircle) {\n        var style = this._isFollowing() ? this.options.followCircleStyle : this.options.circleStyle;\n\n        if (!this._circle) {\n          this._circle = L.circle(latlng, radius, style).addTo(this._layer);\n        } else {\n          this._circle.setLatLng(latlng).setRadius(radius).setStyle(style);\n        }\n      }\n\n      var distance, unit;\n\n      if (this.options.metric) {\n        distance = radius.toFixed(0);\n        unit = this.options.strings.metersUnit;\n      } else {\n        distance = (radius * 3.2808399).toFixed(0);\n        unit = this.options.strings.feetUnit;\n      } // small inner marker\n\n\n      if (this.options.drawMarker) {\n        var mStyle = this._isFollowing() ? this.options.followMarkerStyle : this.options.markerStyle;\n\n        if (!this._marker) {\n          this._marker = new this.options.markerClass(latlng, mStyle).addTo(this._layer);\n        } else {\n          this._marker.setLatLng(latlng); // If the markerClass can be updated with setStyle, update it.\n\n\n          if (this._marker.setStyle) {\n            this._marker.setStyle(mStyle);\n          }\n        }\n      }\n\n      var t = this.options.strings.popup;\n\n      if (this.options.showPopup && t && this._marker) {\n        this._marker.bindPopup(L.Util.template(t, {\n          distance: distance,\n          unit: unit\n        }))._popup.setLatLng(latlng);\n      }\n    },\n\n    /**\n    * Remove the marker from map.\n    */\n    _removeMarker: function _removeMarker() {\n      this._layer.clearLayers();\n\n      this._marker = undefined;\n      this._circle = undefined;\n    },\n\n    /**\n    * Unload the plugin and all event listeners.\n    * Kind of the opposite of onAdd.\n    */\n    _unload: function _unload() {\n      this.stop();\n\n      this._map.off('unload', this._unload, this);\n    },\n\n    /**\n    * Calls deactivate and dispatches an error.\n    */\n    _onLocationError: function _onLocationError(err) {\n      // ignore time out error if the location is watched\n      if (err.code == 3 && this.options.locateOptions.watch) {\n        return;\n      }\n\n      this.stop();\n      this.options.onLocationError(err, this);\n    },\n\n    /**\n    * Stores the received event and updates the marker.\n    */\n    _onLocationFound: function _onLocationFound(e) {\n      // no need to do anything if the location has not changed\n      if (this._event && this._event.latlng.lat === e.latlng.lat && this._event.latlng.lng === e.latlng.lng && this._event.accuracy === e.accuracy) {\n        return;\n      }\n\n      if (!this._active) {\n        // we may have a stray event\n        return;\n      }\n\n      this._event = e;\n\n      this._drawMarker();\n\n      this._updateContainerStyle();\n\n      switch (this.options.setView) {\n        case 'once':\n          if (this._justClicked) {\n            this.setView();\n          }\n\n          break;\n\n        case 'untilPan':\n          if (!this._userPanned) {\n            this.setView();\n          }\n\n          break;\n\n        case 'always':\n          this.setView();\n          break;\n\n        case false:\n          // don't set the view\n          break;\n      }\n\n      this._justClicked = false;\n    },\n\n    /**\n    * When the user drags. Need a separate even so we can bind and unbind even listeners.\n    */\n    _onDrag: function _onDrag() {\n      // only react to drags once we have a location\n      if (this._event) {\n        this._userPanned = true;\n\n        this._updateContainerStyle();\n\n        this._drawMarker();\n      }\n    },\n\n    /**\n    * Compute whether the map is following the user location with pan and zoom.\n    */\n    _isFollowing: function _isFollowing() {\n      if (!this._active) {\n        return false;\n      }\n\n      if (this.options.setView === 'always') {\n        return true;\n      } else if (this.options.setView === 'untilPan') {\n        return !this._userPanned;\n      }\n    },\n\n    /**\n    * Check if location is in map bounds\n    */\n    _isOutsideMapBounds: function _isOutsideMapBounds() {\n      if (this._event === undefined) {\n        return false;\n      }\n\n      return this._map.options.maxBounds && !this._map.options.maxBounds.contains(this._event.latlng);\n    },\n\n    /**\n    * Toggles button class between following and active.\n    */\n    _updateContainerStyle: function _updateContainerStyle() {\n      if (!this._container) {\n        return;\n      }\n\n      if (this._active && !this._event) {\n        // active but don't have a location yet\n        this._setClasses('requesting');\n      } else if (this._isFollowing()) {\n        this._setClasses('following');\n      } else if (this._active) {\n        this._setClasses('active');\n      } else {\n        this._cleanClasses();\n      }\n    },\n\n    /**\n    * Sets the CSS classes for the state.\n    */\n    _setClasses: function _setClasses(state) {\n      if (state == 'requesting') {\n        removeClasses(this._container, 'active following');\n        addClasses(this._container, 'requesting');\n        removeClasses(this._icon, this.options.icon);\n        addClasses(this._icon, this.options.iconLoading);\n      } else if (state == 'active') {\n        removeClasses(this._container, 'requesting following');\n        addClasses(this._container, 'active');\n        removeClasses(this._icon, this.options.iconLoading);\n        addClasses(this._icon, this.options.icon);\n      } else if (state == 'following') {\n        removeClasses(this._container, 'requesting');\n        addClasses(this._container, 'active following');\n        removeClasses(this._icon, this.options.iconLoading);\n        addClasses(this._icon, this.options.icon);\n      }\n    },\n\n    /**\n    * Removes all classes from button.\n    */\n    _cleanClasses: function _cleanClasses() {\n      L.DomUtil.removeClass(this._container, 'requesting');\n      L.DomUtil.removeClass(this._container, 'active');\n      L.DomUtil.removeClass(this._container, 'following');\n      removeClasses(this._icon, this.options.iconLoading);\n      addClasses(this._icon, this.options.icon);\n    },\n\n    /**\n    * Reinitializes state variables.\n    */\n    _resetVariables: function _resetVariables() {\n      // whether locate is active or not\n      this._active = false; // true if the control was clicked for the first time we need this so we can pan\n      // and zoom once we have the location\n\n      this._justClicked = false; // true if the user has panned the map after clicking the control\n\n      this._userPanned = false;\n    }\n  });\n\n  L.control.locate = function (options) {\n    return new L.Control.Locate(options);\n  };\n\n  return LocateControl;\n}, window);","map":{"version":3,"sources":["/Users/florentluu/Documents/Leaflet-GeolocationMap/node_modules/react-leaflet-locate-control/dist/lib/locate.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","factory","window","define","amd","exports","L","module","require","Control","Locate","LDomUtilApplyClassesMethod","method","element","classNames","split","forEach","className","DomUtil","call","addClasses","el","names","removeClasses","LocateControl","extend","options","position","layer","undefined","setView","keepCurrentZoomLevel","flyTo","clickBehavior","inView","outOfView","returnToPrevBounds","cacheLocation","drawCircle","drawMarker","markerClass","CircleMarker","circleStyle","color","fillColor","fillOpacity","weight","opacity","markerStyle","radius","followCircleStyle","followMarkerStyle","icon","iconLoading","iconElementTag","circlePadding","metric","createButtonCallback","container","link","create","title","strings","onActivate","onLocationError","err","control","alert","message","onLocationOutsideMapBounds","stop","outsideMapBoundsMsg","showPopup","metersUnit","feetUnit","popup","locateOptions","maxZoom","Infinity","watch","initialize","i","onAdd","map","_layer","LayerGroup","addTo","_event","_prevBounds","linkAndIcon","_link","_icon","DomEvent","on","stopPropagation","preventDefault","_onClick","_resetVariables","_map","_unload","_justClicked","_userPanned","_active","behavior","getBounds","contains","latlng","f","flyToBounds","fitBounds","bind","start","_updateContainerStyle","_activate","_drawMarker","_deactivate","_cleanClasses","_removeMarker","locate","_onLocationFound","_onLocationError","_onDrag","stopLocate","off","_isOutsideMapBounds","panTo","latitude","longitude","bounds","padding","accuracy","style","_isFollowing","_circle","circle","setLatLng","setRadius","setStyle","distance","unit","toFixed","mStyle","_marker","t","bindPopup","Util","template","_popup","clearLayers","code","e","lat","lng","maxBounds","_container","_setClasses","state","removeClass"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\nCopyright (c) 2016 Dominik Moritz\n\nThis file is part of the leaflet locate control. It is licensed under the MIT license.\nYou can find the project at: https://github.com/domoritz/leaflet-locatecontrol\n*/\n(function (factory, window) {\n  // see\n  // https://github.com/Leaflet/Leaflet/blob/master/PLUGIN-GUIDE.md#module-loaders\n  // for details on how to structure a leaflet plugin. define an AMD module that\n  // relies on 'leaflet'\n  if (typeof define === 'function' && define.amd) {\n    define(['leaflet'], factory);\n\n    // define a Common JS module that relies on 'leaflet'\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    if (typeof window !== 'undefined' && window.L) {\n      module.exports = factory(L);\n    } else {\n      module.exports = factory(require('leaflet'));\n    }\n  }\n\n  // attach your plugin to the global 'L' variable\n  if (typeof window !== 'undefined' && window.L) {\n    window.L.Control.Locate = factory(L);\n  }\n})(function (L) {\n  var LDomUtilApplyClassesMethod = function LDomUtilApplyClassesMethod(method, element, classNames) {\n    classNames = classNames.split(' ');\n    classNames.forEach(function (className) {\n      L.DomUtil[method].call(this, element, className);\n    });\n  };\n\n  var addClasses = function addClasses(el, names) {\n    LDomUtilApplyClassesMethod('addClass', el, names);\n  };\n  var removeClasses = function removeClasses(el, names) {\n    LDomUtilApplyClassesMethod('removeClass', el, names);\n  };\n\n  var LocateControl = L.Control.extend({\n    options: {\n      /** Position of the control */\n      position: 'topleft',\n      /** The layer that the user's location should be drawn on. By default creates a new layer. */\n      layer: undefined,\n      /**\n        * Automatically sets the map view (zoom and pan) to the user's location as it updates.\n        * While the map is following the user's location, the control is in the `following` state,\n        * which changes the style of the control and the circle marker.\n        *\n        * Possible values:\n        *  - false: never updates the map view when location changes.\n        *  - 'once': set the view when the location is first determined\n        *  - 'always': always updates the map view when location changes.\n        *              The map view follows the users location.\n        *  - 'untilPan': (default) like 'always', except stops updating the\n        *                view if the user has manually panned the map.\n        *                The map view follows the users location until she pans.\n        */\n      setView: 'untilPan',\n      /** Keep the current map zoom level when setting the view and only pan. */\n      keepCurrentZoomLevel: false,\n      /** Smooth pan and zoom to the location of the marker. Only works in Leaflet 1.0+. */\n      flyTo: false,\n      /**\n        * The user location can be inside and outside the current view when the user clicks on the\n        * control that is already active. Both cases can be configures separately.\n        * Possible values are:\n        *  - 'setView': zoom and pan to the current location\n        *  - 'stop': stop locating and remove the location marker\n        */\n      clickBehavior: {\n        /** What should happen if the user clicks on the control while the location is within the current view. */\n        inView: 'stop',\n        /** What should happen if the user clicks on the control while the location is outside the current view. */\n        outOfView: 'setView'\n      },\n      /**\n        * If set, save the map bounds just before centering to the user's\n        * location. When control is disabled, set the view back to the\n        * bounds that were saved.\n        */\n      returnToPrevBounds: false,\n      /**\n        * Keep a cache of the location after the user deactivates the control. If set to false, the user has to wait\n        * until the locate API returns a new location before they see where they are again.\n        */\n      cacheLocation: true,\n      /** If set, a circle that shows the location accuracy is drawn. */\n      drawCircle: true,\n      /** If set, the marker at the users' location is drawn. */\n      drawMarker: true,\n      /** The class to be used to create the marker. For example L.CircleMarker or L.Marker */\n      markerClass: L.CircleMarker,\n      /** Accuracy circle style properties. */\n      circleStyle: {\n        color: '#136AEC',\n        fillColor: '#136AEC',\n        fillOpacity: 0.15,\n        weight: 2,\n        opacity: 0.5\n      },\n      /** Inner marker style properties. Only works if your marker class supports `setStyle`. */\n      markerStyle: {\n        color: '#136AEC',\n        fillColor: '#2A93EE',\n        fillOpacity: 0.7,\n        weight: 2,\n        opacity: 0.9,\n        radius: 5\n      },\n      /**\n        * Changes to accuracy circle and inner marker while following.\n        * It is only necessary to provide the properties that should change.\n        */\n      followCircleStyle: {},\n      followMarkerStyle: {\n        // color: '#FFA500', fillColor: '#FFB000'\n      },\n      /** The CSS class for the icon. For example fa-location-arrow or fa-map-marker */\n      icon: 'fa fa-map-marker',\n      iconLoading: 'fa fa-spinner fa-spin',\n      /** The element to be created for icons. For example span or i */\n      iconElementTag: 'span',\n      /** Padding around the accuracy circle. */\n      circlePadding: [0, 0],\n      /** Use metric units. */\n      metric: true,\n      /**\n        * This callback can be used in case you would like to override button creation behavior.\n        * This is useful for DOM manipulation frameworks such as angular etc.\n        * This function should return an object with HtmlElement for the button (link property) and the icon (icon property).\n        */\n      createButtonCallback: function createButtonCallback(container, options) {\n        var link = L.DomUtil.create('a', 'leaflet-bar-part leaflet-bar-part-single', container);\n        link.title = options.strings.title;\n        var icon = L.DomUtil.create(options.iconElementTag, options.icon, link);\n        return { link: link, icon: icon };\n      },\n      /** Callback to add logic before the location engine starts working\n       */\n      onActivate: function onActivate() {},\n      /** This event is called in case of any location error that is not a time out error. */\n      onLocationError: function onLocationError(err, control) {\n        alert(err.message);\n      },\n      /**\n        * This even is called when the user's location is outside the bounds set on the map.\n        * The event is called repeatedly when the location changes.\n        */\n      onLocationOutsideMapBounds: function onLocationOutsideMapBounds(control) {\n        control.stop();\n        alert(control.options.strings.outsideMapBoundsMsg);\n      },\n      /** Display a pop-up when the user click on the inner marker. */\n      showPopup: true,\n      strings: {\n        title: 'Show me where I am',\n        metersUnit: 'meters',\n        feetUnit: 'feet',\n        popup: 'You are within {distance} {unit} from this point',\n        outsideMapBoundsMsg: 'You seem located outside the boundaries of the map'\n      },\n      /** The default options passed to leaflets locate method. */\n      locateOptions: {\n        maxZoom: Infinity,\n        watch: true, // if you overwrite this, visualization cannot be updated\n        setView: false // have to set this to false because we have to\n        // do setView manually\n      }\n    },\n\n    initialize: function initialize(options) {\n      // set default options if nothing is set (merge one step deep)\n      for (var i in options) {\n        if (_typeof(this.options[i]) === 'object') {\n          L.extend(this.options[i], options[i]);\n        } else {\n          this.options[i] = options[i];\n        }\n      }\n\n      // extend the follow marker style and circle from the normal style\n      this.options.followMarkerStyle = L.extend({}, this.options.markerStyle, this.options.followMarkerStyle);\n      this.options.followCircleStyle = L.extend({}, this.options.circleStyle, this.options.followCircleStyle);\n    },\n\n    /**\n    * Add control to map. Returns the container for the control.\n    */\n    onAdd: function onAdd(map) {\n      var container = L.DomUtil.create('div', 'leaflet-control-locate leaflet-bar leaflet-control');\n\n      this._layer = this.options.layer || new L.LayerGroup();\n      this._layer.addTo(map);\n      this._event = undefined;\n      this._prevBounds = null;\n\n      var linkAndIcon = this.options.createButtonCallback(container, this.options);\n      this._link = linkAndIcon.link;\n      this._icon = linkAndIcon.icon;\n\n      L.DomEvent.on(this._link, 'click', L.DomEvent.stopPropagation).on(this._link, 'click', L.DomEvent.preventDefault).on(this._link, 'click', this._onClick, this).on(this._link, 'dblclick', L.DomEvent.stopPropagation);\n\n      this._resetVariables();\n\n      this._map.on('unload', this._unload, this);\n\n      return container;\n    },\n\n    /**\n    * This method is called when the user clicks on the control.\n    */\n    _onClick: function _onClick() {\n      this._justClicked = true;\n      this._userPanned = false;\n\n      if (this._active && !this._event) {\n        // click while requesting\n        this.stop();\n      } else if (this._active && this._event !== undefined) {\n        var behavior = this._map.getBounds().contains(this._event.latlng) ? this.options.clickBehavior.inView : this.options.clickBehavior.outOfView;\n        switch (behavior) {\n          case 'setView':\n            this.setView();\n            break;\n          case 'stop':\n            this.stop();\n            if (this.options.returnToPrevBounds) {\n              var f = this.options.flyTo ? this._map.flyToBounds : this._map.fitBounds;\n              f.bind(this._map)(this._prevBounds);\n            }\n            break;\n        }\n      } else {\n        if (this.options.returnToPrevBounds) {\n          this._prevBounds = this._map.getBounds();\n        }\n        this.start();\n      }\n\n      this._updateContainerStyle();\n    },\n\n    /**\n    * Starts the plugin:\n    * - activates the engine\n    * - draws the marker (if coordinates available)\n    */\n    start: function start() {\n      this._activate();\n\n      if (this._event) {\n        this._drawMarker(this._map);\n\n        // if we already have a location but the user clicked on the control\n        if (this.options.setView) {\n          this.setView();\n        }\n      }\n      this._updateContainerStyle();\n    },\n\n    /**\n    * Stops the plugin:\n    * - deactivates the engine\n    * - reinitializes the button\n    * - removes the marker\n    */\n    stop: function stop() {\n      this._deactivate();\n\n      this._cleanClasses();\n      this._resetVariables();\n\n      this._removeMarker();\n    },\n\n    /**\n    * This method launches the location engine.\n    * It is called before the marker is updated,\n    * event if it does not mean that the event will be ready.\n    *\n    * Override it if you want to add more functionalities.\n    * It should set the this._active to true and do nothing if\n    * this._active is true.\n    */\n    _activate: function _activate() {\n      if (!this._active) {\n        this.options.onActivate();\n\n        this._map.locate(this.options.locateOptions);\n        this._active = true;\n\n        // bind event listeners\n        this._map.on('locationfound', this._onLocationFound, this);\n        this._map.on('locationerror', this._onLocationError, this);\n        this._map.on('dragstart', this._onDrag, this);\n      }\n    },\n\n    /**\n    * Called to stop the location engine.\n    *\n    * Override it to shutdown any functionalities you added on start.\n    */\n    _deactivate: function _deactivate() {\n      this._map.stopLocate();\n      this._active = false;\n\n      if (!this.options.cacheLocation) {\n        this._event = undefined;\n      }\n\n      // unbind event listeners\n      this._map.off('locationfound', this._onLocationFound, this);\n      this._map.off('locationerror', this._onLocationError, this);\n      this._map.off('dragstart', this._onDrag, this);\n    },\n\n    /**\n    * Zoom (unless we should keep the zoom level) and an to the current view.\n    */\n    setView: function setView() {\n      this._drawMarker();\n      if (this._isOutsideMapBounds()) {\n        this._event = undefined; // clear the current location so we can get back into the bounds\n        this.options.onLocationOutsideMapBounds(this);\n      } else {\n        if (this.options.keepCurrentZoomLevel) {\n          var f = this.options.flyTo ? this._map.flyTo : this._map.panTo;\n          f.bind(this._map)([this._event.latitude, this._event.longitude]);\n        } else {\n          var f = this.options.flyTo ? this._map.flyToBounds : this._map.fitBounds;\n          f.bind(this._map)(this._event.bounds, {\n            padding: this.options.circlePadding,\n            maxZoom: this.options.locateOptions.maxZoom\n          });\n        }\n      }\n    },\n\n    /**\n    * Draw the marker and accuracy circle on the map.\n    *\n    * Uses the event retrieved from onLocationFound from the map.\n    */\n    _drawMarker: function _drawMarker() {\n      if (this._event.accuracy === undefined) {\n        this._event.accuracy = 0;\n      }\n\n      var radius = this._event.accuracy;\n      var latlng = this._event.latlng;\n\n      // circle with the radius of the location's accuracy\n      if (this.options.drawCircle) {\n        var style = this._isFollowing() ? this.options.followCircleStyle : this.options.circleStyle;\n\n        if (!this._circle) {\n          this._circle = L.circle(latlng, radius, style).addTo(this._layer);\n        } else {\n          this._circle.setLatLng(latlng).setRadius(radius).setStyle(style);\n        }\n      }\n\n      var distance, unit;\n      if (this.options.metric) {\n        distance = radius.toFixed(0);\n        unit = this.options.strings.metersUnit;\n      } else {\n        distance = (radius * 3.2808399).toFixed(0);\n        unit = this.options.strings.feetUnit;\n      }\n\n      // small inner marker\n      if (this.options.drawMarker) {\n        var mStyle = this._isFollowing() ? this.options.followMarkerStyle : this.options.markerStyle;\n        if (!this._marker) {\n          this._marker = new this.options.markerClass(latlng, mStyle).addTo(this._layer);\n        } else {\n          this._marker.setLatLng(latlng);\n          // If the markerClass can be updated with setStyle, update it.\n          if (this._marker.setStyle) {\n            this._marker.setStyle(mStyle);\n          }\n        }\n      }\n\n      var t = this.options.strings.popup;\n      if (this.options.showPopup && t && this._marker) {\n        this._marker.bindPopup(L.Util.template(t, {\n          distance: distance,\n          unit: unit\n        }))._popup.setLatLng(latlng);\n      }\n    },\n\n    /**\n    * Remove the marker from map.\n    */\n    _removeMarker: function _removeMarker() {\n      this._layer.clearLayers();\n      this._marker = undefined;\n      this._circle = undefined;\n    },\n\n    /**\n    * Unload the plugin and all event listeners.\n    * Kind of the opposite of onAdd.\n    */\n    _unload: function _unload() {\n      this.stop();\n      this._map.off('unload', this._unload, this);\n    },\n\n    /**\n    * Calls deactivate and dispatches an error.\n    */\n    _onLocationError: function _onLocationError(err) {\n      // ignore time out error if the location is watched\n      if (err.code == 3 && this.options.locateOptions.watch) {\n        return;\n      }\n\n      this.stop();\n      this.options.onLocationError(err, this);\n    },\n\n    /**\n    * Stores the received event and updates the marker.\n    */\n    _onLocationFound: function _onLocationFound(e) {\n      // no need to do anything if the location has not changed\n      if (this._event && this._event.latlng.lat === e.latlng.lat && this._event.latlng.lng === e.latlng.lng && this._event.accuracy === e.accuracy) {\n        return;\n      }\n\n      if (!this._active) {\n        // we may have a stray event\n        return;\n      }\n\n      this._event = e;\n\n      this._drawMarker();\n      this._updateContainerStyle();\n\n      switch (this.options.setView) {\n        case 'once':\n          if (this._justClicked) {\n            this.setView();\n          }\n          break;\n        case 'untilPan':\n          if (!this._userPanned) {\n            this.setView();\n          }\n          break;\n        case 'always':\n          this.setView();\n          break;\n        case false:\n          // don't set the view\n          break;\n      }\n\n      this._justClicked = false;\n    },\n\n    /**\n    * When the user drags. Need a separate even so we can bind and unbind even listeners.\n    */\n    _onDrag: function _onDrag() {\n      // only react to drags once we have a location\n      if (this._event) {\n        this._userPanned = true;\n        this._updateContainerStyle();\n        this._drawMarker();\n      }\n    },\n\n    /**\n    * Compute whether the map is following the user location with pan and zoom.\n    */\n    _isFollowing: function _isFollowing() {\n      if (!this._active) {\n        return false;\n      }\n\n      if (this.options.setView === 'always') {\n        return true;\n      } else if (this.options.setView === 'untilPan') {\n        return !this._userPanned;\n      }\n    },\n\n    /**\n    * Check if location is in map bounds\n    */\n    _isOutsideMapBounds: function _isOutsideMapBounds() {\n      if (this._event === undefined) {\n        return false;\n      }\n      return this._map.options.maxBounds && !this._map.options.maxBounds.contains(this._event.latlng);\n    },\n\n    /**\n    * Toggles button class between following and active.\n    */\n    _updateContainerStyle: function _updateContainerStyle() {\n      if (!this._container) {\n        return;\n      }\n\n      if (this._active && !this._event) {\n        // active but don't have a location yet\n        this._setClasses('requesting');\n      } else if (this._isFollowing()) {\n        this._setClasses('following');\n      } else if (this._active) {\n        this._setClasses('active');\n      } else {\n        this._cleanClasses();\n      }\n    },\n\n    /**\n    * Sets the CSS classes for the state.\n    */\n    _setClasses: function _setClasses(state) {\n      if (state == 'requesting') {\n        removeClasses(this._container, 'active following');\n        addClasses(this._container, 'requesting');\n\n        removeClasses(this._icon, this.options.icon);\n        addClasses(this._icon, this.options.iconLoading);\n      } else if (state == 'active') {\n        removeClasses(this._container, 'requesting following');\n        addClasses(this._container, 'active');\n\n        removeClasses(this._icon, this.options.iconLoading);\n        addClasses(this._icon, this.options.icon);\n      } else if (state == 'following') {\n        removeClasses(this._container, 'requesting');\n        addClasses(this._container, 'active following');\n\n        removeClasses(this._icon, this.options.iconLoading);\n        addClasses(this._icon, this.options.icon);\n      }\n    },\n\n    /**\n    * Removes all classes from button.\n    */\n    _cleanClasses: function _cleanClasses() {\n      L.DomUtil.removeClass(this._container, 'requesting');\n      L.DomUtil.removeClass(this._container, 'active');\n      L.DomUtil.removeClass(this._container, 'following');\n\n      removeClasses(this._icon, this.options.iconLoading);\n      addClasses(this._icon, this.options.icon);\n    },\n\n    /**\n    * Reinitializes state variables.\n    */\n    _resetVariables: function _resetVariables() {\n      // whether locate is active or not\n      this._active = false;\n\n      // true if the control was clicked for the first time we need this so we can pan\n      // and zoom once we have the location\n      this._justClicked = false;\n\n      // true if the user has panned the map after clicking the control\n      this._userPanned = false;\n    }\n  });\n\n  L.control.locate = function (options) {\n    return new L.Control.Locate(options);\n  };\n\n  return LocateControl;\n}, window);"]},"metadata":{},"sourceType":"script"}